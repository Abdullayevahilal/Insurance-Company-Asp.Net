// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Data;

namespace Repository.Migrations
{
    [DbContext(typeof(JotexDbContext))]
    [Migration("20200522115555_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Repository.Models.BaseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("BaseEntities");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseEntity");
                });

            modelBuilder.Entity("Repository.Models.AboutSpec", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<int>("AboutUsId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasIndex("AboutUsId");

                    b.HasDiscriminator().HasValue("AboutSpec");
                });

            modelBuilder.Entity("Repository.Models.AboutUs", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<string>("AboutPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("AboutText")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("AboutTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("İmage")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasDiscriminator().HasValue("AboutUs");
                });

            modelBuilder.Entity("Repository.Models.Agent", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasIndex("ProductId");

                    b.HasDiscriminator().HasValue("Agent");
                });

            modelBuilder.Entity("Repository.Models.Blog", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<string>("ActionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("BlogImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("BlogText")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("BlogTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasDiscriminator().HasValue("Blog");
                });

            modelBuilder.Entity("Repository.Models.Brand", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnName("Brand_Logo")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Brand_Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasDiscriminator().HasValue("Brand");
                });

            modelBuilder.Entity("Repository.Models.HomeSlider", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<string>("ActionText")
                        .IsRequired()
                        .HasColumnName("HomeSlider_ActionText")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EndPoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnName("HomeSlider_Image")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("OrderBy")
                        .HasColumnType("int");

                    b.Property<string>("Slogon")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasDiscriminator().HasValue("HomeSlider");
                });

            modelBuilder.Entity("Repository.Models.Label", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasDiscriminator().HasValue("Label");
                });

            modelBuilder.Entity("Repository.Models.Likeable", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<int>("AboutUsId")
                        .HasColumnName("Likeable_AboutUsId")
                        .HasColumnType("int");

                    b.Property<string>("ActionText")
                        .IsRequired()
                        .HasColumnName("Likeable_ActionText")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("Likeable_Phone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnName("Likeable_Text")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("Likeable_Title")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("İmage")
                        .IsRequired()
                        .HasColumnName("Likeable_İmage")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasIndex("AboutUsId");

                    b.HasDiscriminator().HasValue("Likeable");
                });

            modelBuilder.Entity("Repository.Models.Product", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("LabelId")
                        .HasColumnType("int");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnName("Product_Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Product_Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasIndex("LabelId");

                    b.HasDiscriminator().HasValue("Product");
                });

            modelBuilder.Entity("Repository.Models.ProductSpec", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<string>("Key")
                        .HasColumnName("ProductSpec_Key")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("OrderBy")
                        .HasColumnName("ProductSpec_OrderBy")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductSpec_ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnName("ProductSpec_Value")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasIndex("ProductId");

                    b.HasDiscriminator().HasValue("ProductSpec");
                });

            modelBuilder.Entity("Repository.Models.Setting", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("HaveAnyQuery")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnName("Setting_Logo")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("OficceTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("Setting_Phone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasDiscriminator().HasValue("Setting");
                });

            modelBuilder.Entity("Repository.Models.Testimonial", b =>
                {
                    b.HasBaseType("Repository.Models.BaseEntity");

                    b.Property<string>("AboutText")
                        .IsRequired()
                        .HasColumnName("Testimonial_AboutText")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Testimonial_Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnName("Testimonial_Position")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasDiscriminator().HasValue("Testimonial");
                });

            modelBuilder.Entity("Repository.Models.AboutSpec", b =>
                {
                    b.HasOne("Repository.Models.AboutUs", "AboutUs")
                        .WithMany("AboutSpecs")
                        .HasForeignKey("AboutUsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Repository.Models.Agent", b =>
                {
                    b.HasOne("Repository.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Repository.Models.Likeable", b =>
                {
                    b.HasOne("Repository.Models.AboutUs", "AboutUs")
                        .WithMany()
                        .HasForeignKey("AboutUsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Repository.Models.Product", b =>
                {
                    b.HasOne("Repository.Models.Label", "Label")
                        .WithMany("Products")
                        .HasForeignKey("LabelId");
                });

            modelBuilder.Entity("Repository.Models.ProductSpec", b =>
                {
                    b.HasOne("Repository.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
